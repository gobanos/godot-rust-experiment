<?xml version="1.0" encoding="UTF-8" ?>
<class name="Plane" version="3.3">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="Plane">
			<return type="Plane" />
			<argument index="0" name="a" type="float" />
			<argument index="1" name="b" type="float" />
			<argument index="2" name="c" type="float" />
			<argument index="3" name="d" type="float" />
			<description>
			</description>
		</method>
		<method name="Plane">
			<return type="Plane" />
			<argument index="0" name="v1" type="Vector3" />
			<argument index="1" name="v2" type="Vector3" />
			<argument index="2" name="v3" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="Plane">
			<return type="Plane" />
			<argument index="0" name="normal" type="Vector3" />
			<argument index="1" name="d" type="float" />
			<description>
			</description>
		</method>
		<method name="center">
			<return type="Vector3" />
			<description>
			</description>
		</method>
		<method name="distance_to">
			<return type="float" />
			<argument index="0" name="point" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="get_any_point">
			<return type="Vector3" />
			<description>
			</description>
		</method>
		<method name="has_point">
			<return type="bool" />
			<argument index="0" name="point" type="Vector3" />
			<argument index="1" name="epsilon" type="float" default="1e-05" />
			<description>
			</description>
		</method>
		<method name="intersect_3">
			<return type="Vector3" />
			<argument index="0" name="b" type="Plane" />
			<argument index="1" name="c" type="Plane" />
			<description>
			</description>
		</method>
		<method name="intersects_ray">
			<return type="Vector3" />
			<argument index="0" name="from" type="Vector3" />
			<argument index="1" name="dir" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="intersects_segment">
			<return type="Vector3" />
			<argument index="0" name="begin" type="Vector3" />
			<argument index="1" name="end" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="is_equal_approx">
			<return type="bool" />
			<argument index="0" name="plane" type="Plane" />
			<description>
			</description>
		</method>
		<method name="is_point_over">
			<return type="bool" />
			<argument index="0" name="point" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="normalized">
			<return type="Plane" />
			<description>
			</description>
		</method>
		<method name="project">
			<return type="Vector3" />
			<argument index="0" name="point" type="Vector3" />
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="d" type="float" setter="" getter="" default="0.0">
		</member>
		<member name="normal" type="Vector3" setter="" getter="" default="Vector3( 0, 0, 0 )">
		</member>
		<member name="x" type="float" setter="" getter="" default="0.0">
		</member>
		<member name="y" type="float" setter="" getter="" default="0.0">
		</member>
		<member name="z" type="float" setter="" getter="" default="0.0">
		</member>
	</members>
	<constants>
		<constant name="PLANE_YZ" value="Plane( 1, 0, 0, 0 )">
		</constant>
		<constant name="PLANE_XZ" value="Plane( 0, 1, 0, 0 )">
		</constant>
		<constant name="PLANE_XY" value="Plane( 0, 0, 1, 0 )">
		</constant>
	</constants>
</class>
